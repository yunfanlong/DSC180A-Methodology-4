commit bebe2d997f532504567dcb62c31ae0cfb64de1df
Merge: 334599d 4531955
Author: Justin Long <justinlong@Justins-MacBook-Pro.local>
Date:   Thu Nov 16 16:49:54 2023 -0800

    solved conflicts

diff --cc README.md
index 1bf7805,b8839c2..290c7fa
--- a/README.md
+++ b/README.md
@@@ -1,3 -1,2 +1,2 @@@
  # DSC180A-Methodology-4
- Yunfan Long
- yulong@ucsd.edu
 -Jessica Song
++Yunfan Long and Jessica Song
diff --cc lec02.ipynb
index 01776cf,b90654b..b18f1f8
--- a/lec02.ipynb
+++ b/lec02.ipynb
@@@ -415,8 -392,7 +415,9 @@@
     "metadata": {},
     "outputs": [],
     "source": [
++
 +    "# Exponentiation first!\n",
-     "5 * 2 ** 3"
+     "3 * 4 ** 2"
     ]
    },
    {
@@@ -425,8 -401,7 +426,9 @@@
     "metadata": {},
     "outputs": [],
     "source": [
++
 +    "# Multiplication first!\n",
-     "(5 * 2) ** 3"
+     "(3 * 4) ** 2"
     ]
    },
    {

commit 334599dd218aa187bc18a30a24b24bf2838e7f45
Author: Justin Long <justinlong@Justins-MacBook-Pro.local>
Date:   Thu Nov 16 16:41:46 2023 -0800

    conflict

diff --git a/README.md b/README.md
index 838e8bf..1bf7805 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,3 @@
 # DSC180A-Methodology-4
-Yunfan Long
\ No newline at end of file
+Yunfan Long
+yulong@ucsd.edu
\ No newline at end of file
diff --git a/lec02.ipynb b/lec02.ipynb
index 04812ed..01776cf 100644
--- a/lec02.ipynb
+++ b/lec02.ipynb
@@ -20,6 +20,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -33,6 +34,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -52,6 +54,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -68,6 +71,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -85,6 +89,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -104,6 +109,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -115,6 +121,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -129,6 +136,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -140,6 +148,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -155,6 +164,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -169,6 +179,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -180,6 +191,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -191,6 +203,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -206,6 +219,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -217,6 +231,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -228,6 +243,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -245,6 +261,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -256,6 +273,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -267,6 +285,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -278,6 +297,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -289,6 +309,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -356,6 +377,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -376,6 +398,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -392,6 +415,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
+    "# Exponentiation first!\n",
     "5 * 2 ** 3"
    ]
   },
@@ -401,10 +425,12 @@
    "metadata": {},
    "outputs": [],
    "source": [
+    "# Multiplication first!\n",
     "(5 * 2) ** 3"
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -429,6 +455,7 @@
    "source": []
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -440,6 +467,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -462,6 +490,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -482,6 +511,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -493,6 +523,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -504,6 +535,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -517,6 +549,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -528,6 +561,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -540,6 +574,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -566,6 +601,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -590,6 +626,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -614,6 +651,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -625,6 +663,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -649,6 +688,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -678,6 +718,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -698,6 +739,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -718,6 +760,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -734,6 +777,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -763,6 +807,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -789,6 +834,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -818,6 +864,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -850,6 +897,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -871,6 +919,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -891,6 +940,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -911,6 +961,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -942,6 +993,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -960,6 +1012,7 @@
    "source": []
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -971,6 +1024,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -990,6 +1044,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1015,6 +1070,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1063,6 +1119,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1103,6 +1160,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1125,6 +1183,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1150,6 +1209,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1165,6 +1225,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1225,6 +1286,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1245,6 +1307,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1275,6 +1338,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1286,6 +1350,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1315,6 +1380,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1326,6 +1392,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1340,6 +1407,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1353,6 +1421,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1404,6 +1473,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1445,6 +1515,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1493,6 +1564,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1549,6 +1621,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1573,6 +1646,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1586,6 +1660,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1597,6 +1672,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {
@@ -1617,6 +1693,7 @@
    ]
   },
   {
+   "attachments": {},
    "cell_type": "markdown",
    "metadata": {
     "slideshow": {

commit 4531955d95d5ae98284c5a4ebf027699a08f9eba
Author: 7essicas <swwjs7@gmail.com>
Date:   Thu Nov 16 16:39:42 2023 -0800

    initial update

diff --git a/.ipynb_checkpoints/lec02-checkpoint.ipynb b/.ipynb_checkpoints/lec02-checkpoint.ipynb
new file mode 100644
index 0000000..b90654b
--- /dev/null
+++ b/.ipynb_checkpoints/lec02-checkpoint.ipynb
@@ -0,0 +1,1664 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "skip"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# Don't worry about what this code does, but make sure to run it if you're following along.\n",
+    "from IPython.display import IFrame\n",
+    "def show_nested_eval():\n",
+    "    src = 'https://docs.google.com/presentation/d/e/2PACX-1vQpW0NzwT3LjZsIIDAgtSMRM1cl41Gp_Lf8k9GT-gm5sGAIynw4rsgiEFbIybClD6QtxarKaVKLbR9U/embed?start=false&loop=false&delayms=60000&rm=minimal\" frameborder=\"0\" width=\"960\" height=\"569\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"'\n",
+    "    width = 960\n",
+    "    height = 569\n",
+    "    return IFrame(src, width, height)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "# Lecture 2 – Expressions and Data Types\n",
+    "\n",
+    "## DSC 10, Fall 2023"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Announcements\n",
+    "\n",
+    "- Everything you need for this class is at [dsc10.com](https://dsc10.com/). This class **does not use Canvas**.\n",
+    "- The [solutions](https://practice.dsc10.com/pretest/index.html) to the pretest are now posted. See how you did and watch the [🎥 video](https://www.youtube.com/watch?v=5PIYafC41Ho) at the end to learn more about important test-taking skills.\n",
+    "- Lab 0 is out and is now due on **Saturday, October 7 at 11:59PM**.\n",
+    "    - It's worthwhile to watch the [🎥 video](https://www.youtube.com/watch?v=Hq8VaNirDRQ) towards the end on how to navigate DataHub and Jupyter Notebooks.\n",
+    "- The [office hours schedule](https://dsc10.com/calendar/) is now posted, and office hours start today in [HDSI 155](https://map.concept3d.com/?id=1005#!m/246301). Please visit! \n",
+    "- Post on [Ed](https://edstem.org/us/courses/48101/discussion/) with any questions.\n",
+    "- It was great seeing so many of you on Friday at our Meet the Professors event. We made it on the [HDSI Instagram](https://www.instagram.com/p/CxzN2JGLoSK/?igshid=MzRlODBiNWFlZA==)!\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Opportunities\n",
+    "\n",
+    "- There are two events coming up this week that may interest you:\n",
+    "    1. **Python Bootcamp** for DSC 10 students new to programming. Tomorrow and Thursday 1-3pm on Zoom. [Sign up here](https://docs.google.com/forms/d/e/1FAIpQLSduhwSsSQrzCAKPgh__udyhEl10ZxuI2EOhG4NvuqL2Djv82g/viewform)!\n",
+    "    2. **HDSI Undergraduate Social**. Thursday, October 5th from 4-6pm on the HDSI Patio. \n",
+    "- We'll post events like this on our [\"Opportunities\" thread on Ed](https://edstem.org/us/courses/48101/discussion/3532342). Check it out periodically!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Discussion sections\n",
+    "\n",
+    "- There is **no discussion today**, or any Monday. We are only holding discussions on Wednesday afternoons:\n",
+    "    - Section A: Wednesday 3-3:50PM in Pepper Canyon Hall 109.\n",
+    "    - Section B: Wednesday 4-4:50PM in Pepper Canyon Hall 109.\n",
+    "    - Section C: Wednesday 5-5:50PM in Mandeville B-210.\n",
+    "- Please fill out the [Welcome Survey](https://forms.gle/LBYWU9WMD2SRDz458) as soon as possible; here you can request to change discussions or get assigned to a discussion if you're enrolled in Section D."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Agenda\n",
+    "\n",
+    "- What is code? What are Jupyter Notebooks?\n",
+    "- Expressions.\n",
+    "- Variables.\n",
+    "- Calling functions.\n",
+    "- Data types.\n",
+    "\n",
+    "There will be lots of programming – follow along in the notebook by clicking the \"Expressions and Data Types\" link on the [course website](https://dsc10.com)."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## What is code? What are Jupyter Notebooks? 💻"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### What is code?\n",
+    "\n",
+    "- Instructions for computers are written in **programming languages**, and are referred to as **code**.\n",
+    "- “Computer programs” are nothing more than **recipes**: we write programs that tell the computer exactly what to do, and it does exactly that – nothing more, and nothing less."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Why Python?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- It's popular!\n",
+    "\n",
+    "<center>\n",
+    "<img src='images/languages.jpg' width=40%>\n",
+    "</center>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- It has a variety of use cases. Some examples:\n",
+    "    - Web development.\n",
+    "    - Data science and machine learning.\n",
+    "    - Scripting and automation."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- It's (relatively) easy to dive right in! 🏊"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Jupyter Notebooks 📓"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- Often, but not in this class, code is written in a text editor and then run in a command-line interface (or both steps are done in an IDE).\n",
+    "\n",
+    "<center>\n",
+    "<img src='images/terminal.png' width=800>\n",
+    "</center>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- **Jupyter Notebooks** allow us to write and run code within a single document. They also allow us to embed text and code. **We will be using Jupyter Notebooks throughout the quarter**."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- [DataHub](https://datahub.ucsd.edu) is a server that allows you to run Jupyter Notebooks from your web browser without having to install any software locally."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Aside: Lecture slides\n",
+    "\n",
+    "- The lecture slides you're viewing right now are also in the form of a Jupyter Notebook – we're just using an extension (called _RISE_) to make them look like slides.\n",
+    "- When you click a lecture DataHub link on the course website, you'll see the lecture notebook in regular notebook form.\n",
+    "- To view it in slides form, click the bar chart button in the toolbar.\n",
+    "\n",
+    "<center><img src='images/rise.png' width=10%><i>This button!</i></center>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Expressions"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Python as a calculator"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- An **expression** is a combination of values, operators, and functions that **evaluates** to some **value**."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- For now, let's think of Python like a calculator – it takes expressions and evaluates them."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- We will enter our expressions in **code cells**. To run a code cell, either:\n",
+    "    - **Hit `shift` + `enter` (or `shift` + `return`) on your keyboard (strongly preferred)**, or\n",
+    "    - Press the \"▶ Run\" button in the toolbar."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "23"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "-15 + 2.718"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "4 ** 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "(2 + 3 + 4) / 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [],
+   "source": [
+    "# Only one value is displayed. Why?\n",
+    "9 + 10\n",
+    "13 / 4\n",
+    "21"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Arithmetic operations\n",
+    "\n",
+    "| Operation | Operator | Example | Value | \n",
+    "| --- | --- | --- | --- |\n",
+    "| Addition | `+` | `2 + 3` | `5` |\n",
+    "| Subtraction | `-` | `2 - 3` | `-1` |\n",
+    "| Multiplication | `*` | `2 * 3` | `6` |\n",
+    "| Division | `/` | `7 / 3` | `2.66667` |\n",
+    "| Remainder | `%` | `7 % 3` | `1` |\n",
+    "| Exponentiation | `**` | `2 ** 0.5` | `1.41421` |"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Python uses the typical order of operations – PEMDAS (BEDMAS? 🛏️) "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "3 * 4 ** 2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "(3 * 4) ** 2"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Activity\n",
+    "\n",
+    "In the cell below, replace the ellipses with an expression that's equivalent to\n",
+    "\n",
+    "$$(19 + 6 \\cdot 3) - 15 \\cdot \\left(\\sqrt{100} \\cdot \\frac{1}{30}\\right) \\cdot \\frac{3}{5} + \\frac{4^2}{2^3} + \\left( 6 - \\frac{2}{3} \\right) \\cdot 12 $$\n",
+    "\n",
+    "Try to use parentheses only when necessary."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Variables"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Motivation\n",
+    "\n",
+    "Below, we compute the number of seconds in a year."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "60 * 60 * 24 * 365"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "If we want to use the above value later in our notebook to find, say, the number of seconds in 12 years, we'd have to copy-and-paste the expression. **This is inconvenient, and prone to introducing errors.**"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "60 * 60 * 24 * 365 * 12"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "It would be great if we could **store** the initial value and refer to it later on!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Variables and assignment statements"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- A **variable** is a place to store a value so that it can be referred to later in our code. To define a variable, we use an **assignment statement**.\n",
+    "\n",
+    "$$ \\overbrace{\\texttt{zebra}}^{\\text{name}} = \\overbrace{\\texttt{23 - 14}}^{\\text{any expression}} $$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "-  An assignment statement changes the meaning of the **name** to the left of the `=` symbol."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- The expression on the right-hand side of the `=` symbol is evaluated before being assigned to the name on the left-hand side.\n",
+    "    * e.g. `zebra` is bound to `9` (value) not `23 - 14` (expression)."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Think of variable names as nametags!"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# Note: This is an assignment statement, not an expression.\n",
+    "# Assignment statements don't output anything!\n",
+    "a = 1"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "<center><img src=\"images/a1.png\" width=10%></center>"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "a = 2"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "<center><img src=\"images/a21.png\" width=17%></center>"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "b = 2"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "<center><img src=\"images/ab2.png\" width=15%></center>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Example\n",
+    "\n",
+    "Note that before we use it in an assignment statement, `triton` has no meaning."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [],
+   "source": [
+    "triton"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "After using it in an assignment statement, we can ask Python for its value."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton = 15 - 5"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "Any time we use `triton` in an expression, `10` is substituted for it."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton * -4"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "Note that the above expression **did not change** the value of `triton`, because **we did not re-assign `triton`**!"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Naming variables\n",
+    "\n",
+    "- Give your variables helpful names so that you know what they refer to.\n",
+    "- Variable names can contain uppercase and lowercase characters, the digits 0-9, and underscores.\n",
+    "    - They cannot start with a number.\n",
+    "    - They are case sensitive!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "The following assignment statements are **valid**, but use **poor** variable names 😕."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "six = 15"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "i_45love_chocolate_9999 = 60 * 60 * 24 * 365"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "The following assignment statements are **valid**, and use **good** variable names ✅."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "tags": [
+     "raises-exception"
+    ]
+   },
+   "outputs": [],
+   "source": [
+    "seconds_per_hour = 60 * 60\n",
+    "hours_per_year = 24 * 365\n",
+    "seconds_per_year = seconds_per_hour * hours_per_year"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "The following \"assignment statements\" are **invalid ❌**."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "7_days = 24 * 7"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "3 = 2 + 1"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Assignment statements are not mathematical equations!\n",
+    "\n",
+    "- Unlike in math, where $x = 3$ means the same thing as $3 = x$, assignment statements are **not** \"symmetric\".\n",
+    "- An assignment statement assigns (or \"binds\") the name on the left of `=` to the value to the right of `=`, nothing more."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "x = 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "3 = x"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### A variable's value is set at the time of assignment"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "uc = 2\n",
+    "sd = 3 + uc"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "Assignment statements are **not promises** – the value of a variable can change!"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "uc = 7"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "Note that even after changing `uc`, we did not change `sd`, so it is still the same as before."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "sd"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Concept Check ✅ – Answer at [cc.dsc10.com](http://cc.dsc10.com) \n",
+    "\n",
+    "Assume you have run the following three lines of code:\n",
+    "\n",
+    "```py\n",
+    "side_length = 5\n",
+    "area = side_length ** 2\n",
+    "side_length = side_length + 2\n",
+    "```\n",
+    "\n",
+    "What are the values of `side_length` and `area` after execution?\n",
+    "\n",
+    "A. `side_length = 5`, `area = 25`\n",
+    "\n",
+    "B. `side_length = 5`, `area = 49`\n",
+    "\n",
+    "C. `side_length = 7`, `area = 25`\n",
+    "\n",
+    "D. `side_length = 7`, `area = 49`\n",
+    "\n",
+    "E. None of the above"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Aside: hit ```tab``` to autocomplete a set name"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Calling functions 📞"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Algebraic functions\n",
+    "\n",
+    "- In math, functions take in some input and return some output.\n",
+    "\n",
+    "$$f(x, y) = \\frac{x}{y} + 2x^2 + y^5$$\n",
+    "\n",
+    "- We can determine the output of a function even if we pass in complicated-looking inputs.\n",
+    "\n",
+    "$$f\\left(\\frac{5-3}{17 \\cdot 2}, (4-3)^{-5}\\right)$$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Python functions\n",
+    "\n",
+    "- Functions in Python work the same way functions in math do.\n",
+    "- The inputs to functions are called **arguments**.\n",
+    "- Python comes with a number of built-in functions that we are free to use.\n",
+    "- **Calling** a function, or using a function, means asking the function to \"run its recipe\" on the given input."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "abs(-23)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Some functions can take a variable number of arguments"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "max(4, -8)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "max(2, -3, -6, 10, -4)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "max(9)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Only two arguments!\n",
+    "max(9 + 10, 9 - 10)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Put ```?``` after a function's name to see its documentation 📄\n",
+    "\n",
+    "Or use the `help` function, e.g. `help(round)`."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "round(1.45678)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "round?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "round(1.45678, 3)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Nested evaluation\n",
+    "\n",
+    "We can **nest** many function calls to evaluate sophisticated expressions."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "min(abs(max(-1, -2, -3, min(4, -2))), max(5, 100))"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "...how did that work?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "scrolled": false,
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "show_nested_eval()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Import statements\n",
+    "- Python doesn't have everything we need built in.\n",
+    "- In order to gain additional functionality, we import **modules** through **import statements**.\n",
+    "- **Modules** are collections of Python functions and values.\n",
+    "- Call these functions using the syntax `module.function()`, called \"dot notation\"."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Example: `import math`\n",
+    "\n",
+    "Some of the many functions built into the `math` module are `sqrt`, `pow`, and `log`."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import math"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "math.sqrt(16)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "math.pow(2, 5)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# What base is log?\n",
+    "math.log?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Tab completion for browsing.\n",
+    "math."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "`math` also has constants built in!"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "math.pi"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Concept Check ✅ – Answer at [cc.dsc10.com](http://cc.dsc10.com) \n",
+    "\n",
+    "Assume you have run the following statements:\n",
+    "\n",
+    "```py\n",
+    "x = 3\n",
+    "y = -2\n",
+    "```\n",
+    "\n",
+    "Which of these examples results in an error?\n",
+    "\n",
+    "A. `abs(x, y)`\n",
+    "\n",
+    "B. `math.pow(x, abs(y))`\n",
+    "\n",
+    "C. `round(x, max(abs(y ** 2)))`\n",
+    "\n",
+    "D. `math.pow(x, math.pow(y, x))`\n",
+    "\n",
+    "E. More than one of the above"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Data types"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### What's the difference? 🧐"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "4 / 2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "5 - 3"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "To us, `2.0` and `2` are the same number, $2$. But to Python, these appear to be different! "
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Data types\n",
+    "- Every value in Python has a **type**.\n",
+    "    - Use the `type` function to check a value's type.\n",
+    "- It's important to understand how different types work with different operations, as the results may not always be what we expect."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Two numeric data types: ```int``` and ```float``` \n",
+    "- ```int```: An integer of any size.\n",
+    "- ```float```: A number with a decimal point."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### ```int```\n",
+    "- If you add (`+`), subtract (`-`), multiply (`*`), or exponentiate (`**`) `int`s, the result will be another `int`.\n",
+    "- `int`s have arbitrary precision in Python, meaning that your calculations will always be exact. "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "7 - 15"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "type(7 - 15)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "2 ** 300"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [],
+   "source": [
+    "2 ** 3000"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### ```float```\n",
+    "* A `float` is specified using a **decimal** point.\n",
+    "* A `float` might be printed using scientific notation."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "3.2 + 2.5"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "type(3.2 + 2.5)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# The result is in scientific notation: e+90 means \"times 10^90\".\n",
+    "2.0 ** 300"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### The pitfalls of ```float```\n",
+    "* `floats` have limited precision; after arithmetic, the final few decimal places can be wrong in unexpected ways.\n",
+    "* `float`s have limited size, though the limit is huge."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "-"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "1 + 0.2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "tags": [
+     "raises-exception"
+    ]
+   },
+   "outputs": [],
+   "source": [
+    "1 + 0.1 + 0.1"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "2.0 ** 3000"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Converting between ```int``` and ```float```\n",
+    "- If you mix `int`s and `float`s in an expression, the result will always be a `float`.\n",
+    "     - Note that when you divide two `int`s, you get a `float` back.\n",
+    "- A value can be explicity **coerced** (i.e. converted) using the ```int``` and ```float``` functions."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "-"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "2.0 + 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "12 / 2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Want an integer back.\n",
+    "int(12 / 2)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# int chops off the decimal point!\n",
+    "int(-2.9)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Aside: Jupyter memory model\n",
+    "\n",
+    "<center><img src='images/elephant.png' width=20%></center>\n",
+    "\n",
+    "Our notebook **still** remembers all of the variables we defined earlier in the lecture."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- However, if you come back to your notebook after a few hours, it will usually \"forget\" all of the variables it once knew about.\n",
+    "- When this happens, you will need to run the cells in your notebook again.\n",
+    "- See [Navigating DataHub and Jupyter Notebooks](https://www.youtube.com/watch?v=Hq8VaNirDRQ) for more."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Summary, next time"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Summary\n",
+    "\n",
+    "- Expressions evaluate to values. Python will display the value of the last expression in a cell by default.\n",
+    "- Python knows about all of the standard mathematical operators and follows PEMDAS.\n",
+    "- Assignment statements allow us to bind values to variables.\n",
+    "- We can call functions in Python similar to how we call functions in math.\n",
+    "    - Python knows some functions by default, and import statements allow us to bring additional functionality from modules.\n",
+    "- All values in Python have a data type.\n",
+    "    - `int`s and `float`s are numbers.\n",
+    "    - `int`s are integers, while `float`s contain decimal points."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Next time\n",
+    "\n",
+    "- We'll learn about strings, a data type in Python designed to store text. \n",
+    "- We'll also learn how to store sequences, or many pieces of information, in a single variable.\n",
+    "\n",
+    "**Note**: We will introduce some code in labs and homeworks as well. Not everything will be in lecture. **You will learn by doing!**"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3 (ipykernel)",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.9.13"
+  },
+  "livereveal": {
+   "scroll": true,
+   "transition": "none"
+  },
+  "rise": {
+   "enable_chalkboard": true
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 2
+}
diff --git a/README.md b/README.md
index 838e8bf..b8839c2 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
 # DSC180A-Methodology-4
-Yunfan Long
\ No newline at end of file
+Jessica Song
\ No newline at end of file
diff --git a/lec02.ipynb b/lec02.ipynb
index 04812ed..b90654b 100644
--- a/lec02.ipynb
+++ b/lec02.ipynb
@@ -392,7 +392,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "5 * 2 ** 3"
+    "3 * 4 ** 2"
    ]
   },
   {
@@ -401,7 +401,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "(5 * 2) ** 3"
+    "(3 * 4) ** 2"
    ]
   },
   {
@@ -1649,7 +1649,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.9.7"
+   "version": "3.9.13"
   },
   "livereveal": {
    "scroll": true,

commit 8ae115d6b148f6302d647c720f2a0314520a6c91
Author: Justin Long <justinlong@Justins-MacBook-Pro.local>
Date:   Thu Nov 16 16:33:47 2023 -0800

    required materials

diff --git a/README.md b/README.md
index 7105617..838e8bf 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,2 @@
-# DSC180A-Methodology-4
\ No newline at end of file
+# DSC180A-Methodology-4
+Yunfan Long
\ No newline at end of file
diff --git a/lec02.ipynb b/lec02.ipynb
new file mode 100644
index 0000000..04812ed
--- /dev/null
+++ b/lec02.ipynb
@@ -0,0 +1,1664 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "skip"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# Don't worry about what this code does, but make sure to run it if you're following along.\n",
+    "from IPython.display import IFrame\n",
+    "def show_nested_eval():\n",
+    "    src = 'https://docs.google.com/presentation/d/e/2PACX-1vQpW0NzwT3LjZsIIDAgtSMRM1cl41Gp_Lf8k9GT-gm5sGAIynw4rsgiEFbIybClD6QtxarKaVKLbR9U/embed?start=false&loop=false&delayms=60000&rm=minimal\" frameborder=\"0\" width=\"960\" height=\"569\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"'\n",
+    "    width = 960\n",
+    "    height = 569\n",
+    "    return IFrame(src, width, height)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "# Lecture 2 – Expressions and Data Types\n",
+    "\n",
+    "## DSC 10, Fall 2023"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Announcements\n",
+    "\n",
+    "- Everything you need for this class is at [dsc10.com](https://dsc10.com/). This class **does not use Canvas**.\n",
+    "- The [solutions](https://practice.dsc10.com/pretest/index.html) to the pretest are now posted. See how you did and watch the [🎥 video](https://www.youtube.com/watch?v=5PIYafC41Ho) at the end to learn more about important test-taking skills.\n",
+    "- Lab 0 is out and is now due on **Saturday, October 7 at 11:59PM**.\n",
+    "    - It's worthwhile to watch the [🎥 video](https://www.youtube.com/watch?v=Hq8VaNirDRQ) towards the end on how to navigate DataHub and Jupyter Notebooks.\n",
+    "- The [office hours schedule](https://dsc10.com/calendar/) is now posted, and office hours start today in [HDSI 155](https://map.concept3d.com/?id=1005#!m/246301). Please visit! \n",
+    "- Post on [Ed](https://edstem.org/us/courses/48101/discussion/) with any questions.\n",
+    "- It was great seeing so many of you on Friday at our Meet the Professors event. We made it on the [HDSI Instagram](https://www.instagram.com/p/CxzN2JGLoSK/?igshid=MzRlODBiNWFlZA==)!\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Opportunities\n",
+    "\n",
+    "- There are two events coming up this week that may interest you:\n",
+    "    1. **Python Bootcamp** for DSC 10 students new to programming. Tomorrow and Thursday 1-3pm on Zoom. [Sign up here](https://docs.google.com/forms/d/e/1FAIpQLSduhwSsSQrzCAKPgh__udyhEl10ZxuI2EOhG4NvuqL2Djv82g/viewform)!\n",
+    "    2. **HDSI Undergraduate Social**. Thursday, October 5th from 4-6pm on the HDSI Patio. \n",
+    "- We'll post events like this on our [\"Opportunities\" thread on Ed](https://edstem.org/us/courses/48101/discussion/3532342). Check it out periodically!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Discussion sections\n",
+    "\n",
+    "- There is **no discussion today**, or any Monday. We are only holding discussions on Wednesday afternoons:\n",
+    "    - Section A: Wednesday 3-3:50PM in Pepper Canyon Hall 109.\n",
+    "    - Section B: Wednesday 4-4:50PM in Pepper Canyon Hall 109.\n",
+    "    - Section C: Wednesday 5-5:50PM in Mandeville B-210.\n",
+    "- Please fill out the [Welcome Survey](https://forms.gle/LBYWU9WMD2SRDz458) as soon as possible; here you can request to change discussions or get assigned to a discussion if you're enrolled in Section D."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Agenda\n",
+    "\n",
+    "- What is code? What are Jupyter Notebooks?\n",
+    "- Expressions.\n",
+    "- Variables.\n",
+    "- Calling functions.\n",
+    "- Data types.\n",
+    "\n",
+    "There will be lots of programming – follow along in the notebook by clicking the \"Expressions and Data Types\" link on the [course website](https://dsc10.com)."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## What is code? What are Jupyter Notebooks? 💻"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### What is code?\n",
+    "\n",
+    "- Instructions for computers are written in **programming languages**, and are referred to as **code**.\n",
+    "- “Computer programs” are nothing more than **recipes**: we write programs that tell the computer exactly what to do, and it does exactly that – nothing more, and nothing less."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Why Python?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- It's popular!\n",
+    "\n",
+    "<center>\n",
+    "<img src='images/languages.jpg' width=40%>\n",
+    "</center>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- It has a variety of use cases. Some examples:\n",
+    "    - Web development.\n",
+    "    - Data science and machine learning.\n",
+    "    - Scripting and automation."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- It's (relatively) easy to dive right in! 🏊"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Jupyter Notebooks 📓"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- Often, but not in this class, code is written in a text editor and then run in a command-line interface (or both steps are done in an IDE).\n",
+    "\n",
+    "<center>\n",
+    "<img src='images/terminal.png' width=800>\n",
+    "</center>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- **Jupyter Notebooks** allow us to write and run code within a single document. They also allow us to embed text and code. **We will be using Jupyter Notebooks throughout the quarter**."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- [DataHub](https://datahub.ucsd.edu) is a server that allows you to run Jupyter Notebooks from your web browser without having to install any software locally."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Aside: Lecture slides\n",
+    "\n",
+    "- The lecture slides you're viewing right now are also in the form of a Jupyter Notebook – we're just using an extension (called _RISE_) to make them look like slides.\n",
+    "- When you click a lecture DataHub link on the course website, you'll see the lecture notebook in regular notebook form.\n",
+    "- To view it in slides form, click the bar chart button in the toolbar.\n",
+    "\n",
+    "<center><img src='images/rise.png' width=10%><i>This button!</i></center>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Expressions"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Python as a calculator"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- An **expression** is a combination of values, operators, and functions that **evaluates** to some **value**."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- For now, let's think of Python like a calculator – it takes expressions and evaluates them."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- We will enter our expressions in **code cells**. To run a code cell, either:\n",
+    "    - **Hit `shift` + `enter` (or `shift` + `return`) on your keyboard (strongly preferred)**, or\n",
+    "    - Press the \"▶ Run\" button in the toolbar."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "23"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "-15 + 2.718"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "4 ** 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "(2 + 3 + 4) / 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [],
+   "source": [
+    "# Only one value is displayed. Why?\n",
+    "9 + 10\n",
+    "13 / 4\n",
+    "21"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Arithmetic operations\n",
+    "\n",
+    "| Operation | Operator | Example | Value | \n",
+    "| --- | --- | --- | --- |\n",
+    "| Addition | `+` | `2 + 3` | `5` |\n",
+    "| Subtraction | `-` | `2 - 3` | `-1` |\n",
+    "| Multiplication | `*` | `2 * 3` | `6` |\n",
+    "| Division | `/` | `7 / 3` | `2.66667` |\n",
+    "| Remainder | `%` | `7 % 3` | `1` |\n",
+    "| Exponentiation | `**` | `2 ** 0.5` | `1.41421` |"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Python uses the typical order of operations – PEMDAS (BEDMAS? 🛏️) "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "5 * 2 ** 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "(5 * 2) ** 3"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Activity\n",
+    "\n",
+    "In the cell below, replace the ellipses with an expression that's equivalent to\n",
+    "\n",
+    "$$(19 + 6 \\cdot 3) - 15 \\cdot \\left(\\sqrt{100} \\cdot \\frac{1}{30}\\right) \\cdot \\frac{3}{5} + \\frac{4^2}{2^3} + \\left( 6 - \\frac{2}{3} \\right) \\cdot 12 $$\n",
+    "\n",
+    "Try to use parentheses only when necessary."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Variables"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Motivation\n",
+    "\n",
+    "Below, we compute the number of seconds in a year."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "60 * 60 * 24 * 365"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "If we want to use the above value later in our notebook to find, say, the number of seconds in 12 years, we'd have to copy-and-paste the expression. **This is inconvenient, and prone to introducing errors.**"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "60 * 60 * 24 * 365 * 12"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "It would be great if we could **store** the initial value and refer to it later on!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Variables and assignment statements"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- A **variable** is a place to store a value so that it can be referred to later in our code. To define a variable, we use an **assignment statement**.\n",
+    "\n",
+    "$$ \\overbrace{\\texttt{zebra}}^{\\text{name}} = \\overbrace{\\texttt{23 - 14}}^{\\text{any expression}} $$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "-  An assignment statement changes the meaning of the **name** to the left of the `=` symbol."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- The expression on the right-hand side of the `=` symbol is evaluated before being assigned to the name on the left-hand side.\n",
+    "    * e.g. `zebra` is bound to `9` (value) not `23 - 14` (expression)."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Think of variable names as nametags!"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# Note: This is an assignment statement, not an expression.\n",
+    "# Assignment statements don't output anything!\n",
+    "a = 1"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "<center><img src=\"images/a1.png\" width=10%></center>"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "a = 2"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "<center><img src=\"images/a21.png\" width=17%></center>"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "b = 2"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "<center><img src=\"images/ab2.png\" width=15%></center>"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Example\n",
+    "\n",
+    "Note that before we use it in an assignment statement, `triton` has no meaning."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [],
+   "source": [
+    "triton"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "After using it in an assignment statement, we can ask Python for its value."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton = 15 - 5"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "Any time we use `triton` in an expression, `10` is substituted for it."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton * -4"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "Note that the above expression **did not change** the value of `triton`, because **we did not re-assign `triton`**!"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Naming variables\n",
+    "\n",
+    "- Give your variables helpful names so that you know what they refer to.\n",
+    "- Variable names can contain uppercase and lowercase characters, the digits 0-9, and underscores.\n",
+    "    - They cannot start with a number.\n",
+    "    - They are case sensitive!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "The following assignment statements are **valid**, but use **poor** variable names 😕."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "six = 15"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "i_45love_chocolate_9999 = 60 * 60 * 24 * 365"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "The following assignment statements are **valid**, and use **good** variable names ✅."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "tags": [
+     "raises-exception"
+    ]
+   },
+   "outputs": [],
+   "source": [
+    "seconds_per_hour = 60 * 60\n",
+    "hours_per_year = 24 * 365\n",
+    "seconds_per_year = seconds_per_hour * hours_per_year"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "The following \"assignment statements\" are **invalid ❌**."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "7_days = 24 * 7"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "3 = 2 + 1"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Assignment statements are not mathematical equations!\n",
+    "\n",
+    "- Unlike in math, where $x = 3$ means the same thing as $3 = x$, assignment statements are **not** \"symmetric\".\n",
+    "- An assignment statement assigns (or \"binds\") the name on the left of `=` to the value to the right of `=`, nothing more."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "x = 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "3 = x"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### A variable's value is set at the time of assignment"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "uc = 2\n",
+    "sd = 3 + uc"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "Assignment statements are **not promises** – the value of a variable can change!"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "uc = 7"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "Note that even after changing `uc`, we did not change `sd`, so it is still the same as before."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "sd"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Concept Check ✅ – Answer at [cc.dsc10.com](http://cc.dsc10.com) \n",
+    "\n",
+    "Assume you have run the following three lines of code:\n",
+    "\n",
+    "```py\n",
+    "side_length = 5\n",
+    "area = side_length ** 2\n",
+    "side_length = side_length + 2\n",
+    "```\n",
+    "\n",
+    "What are the values of `side_length` and `area` after execution?\n",
+    "\n",
+    "A. `side_length = 5`, `area = 25`\n",
+    "\n",
+    "B. `side_length = 5`, `area = 49`\n",
+    "\n",
+    "C. `side_length = 7`, `area = 25`\n",
+    "\n",
+    "D. `side_length = 7`, `area = 49`\n",
+    "\n",
+    "E. None of the above"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Aside: hit ```tab``` to autocomplete a set name"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Calling functions 📞"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Algebraic functions\n",
+    "\n",
+    "- In math, functions take in some input and return some output.\n",
+    "\n",
+    "$$f(x, y) = \\frac{x}{y} + 2x^2 + y^5$$\n",
+    "\n",
+    "- We can determine the output of a function even if we pass in complicated-looking inputs.\n",
+    "\n",
+    "$$f\\left(\\frac{5-3}{17 \\cdot 2}, (4-3)^{-5}\\right)$$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Python functions\n",
+    "\n",
+    "- Functions in Python work the same way functions in math do.\n",
+    "- The inputs to functions are called **arguments**.\n",
+    "- Python comes with a number of built-in functions that we are free to use.\n",
+    "- **Calling** a function, or using a function, means asking the function to \"run its recipe\" on the given input."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "abs(-23)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Some functions can take a variable number of arguments"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "max(4, -8)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "max(2, -3, -6, 10, -4)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "max(9)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Only two arguments!\n",
+    "max(9 + 10, 9 - 10)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Put ```?``` after a function's name to see its documentation 📄\n",
+    "\n",
+    "Or use the `help` function, e.g. `help(round)`."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "round(1.45678)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "round?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "round(1.45678, 3)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Nested evaluation\n",
+    "\n",
+    "We can **nest** many function calls to evaluate sophisticated expressions."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "min(abs(max(-1, -2, -3, min(4, -2))), max(5, 100))"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "...how did that work?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "scrolled": false,
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "show_nested_eval()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Import statements\n",
+    "- Python doesn't have everything we need built in.\n",
+    "- In order to gain additional functionality, we import **modules** through **import statements**.\n",
+    "- **Modules** are collections of Python functions and values.\n",
+    "- Call these functions using the syntax `module.function()`, called \"dot notation\"."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Example: `import math`\n",
+    "\n",
+    "Some of the many functions built into the `math` module are `sqrt`, `pow`, and `log`."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import math"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "math.sqrt(16)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "math.pow(2, 5)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# What base is log?\n",
+    "math.log?"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Tab completion for browsing.\n",
+    "math."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "`math` also has constants built in!"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "math.pi"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Concept Check ✅ – Answer at [cc.dsc10.com](http://cc.dsc10.com) \n",
+    "\n",
+    "Assume you have run the following statements:\n",
+    "\n",
+    "```py\n",
+    "x = 3\n",
+    "y = -2\n",
+    "```\n",
+    "\n",
+    "Which of these examples results in an error?\n",
+    "\n",
+    "A. `abs(x, y)`\n",
+    "\n",
+    "B. `math.pow(x, abs(y))`\n",
+    "\n",
+    "C. `round(x, max(abs(y ** 2)))`\n",
+    "\n",
+    "D. `math.pow(x, math.pow(y, x))`\n",
+    "\n",
+    "E. More than one of the above"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Data types"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### What's the difference? 🧐"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "4 / 2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "5 - 3"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "To us, `2.0` and `2` are the same number, $2$. But to Python, these appear to be different! "
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Data types\n",
+    "- Every value in Python has a **type**.\n",
+    "    - Use the `type` function to check a value's type.\n",
+    "- It's important to understand how different types work with different operations, as the results may not always be what we expect."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Two numeric data types: ```int``` and ```float``` \n",
+    "- ```int```: An integer of any size.\n",
+    "- ```float```: A number with a decimal point."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### ```int```\n",
+    "- If you add (`+`), subtract (`-`), multiply (`*`), or exponentiate (`**`) `int`s, the result will be another `int`.\n",
+    "- `int`s have arbitrary precision in Python, meaning that your calculations will always be exact. "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "7 - 15"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "type(7 - 15)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "2 ** 300"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [],
+   "source": [
+    "2 ** 3000"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### ```float```\n",
+    "* A `float` is specified using a **decimal** point.\n",
+    "* A `float` might be printed using scientific notation."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "3.2 + 2.5"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "type(3.2 + 2.5)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# The result is in scientific notation: e+90 means \"times 10^90\".\n",
+    "2.0 ** 300"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### The pitfalls of ```float```\n",
+    "* `floats` have limited precision; after arithmetic, the final few decimal places can be wrong in unexpected ways.\n",
+    "* `float`s have limited size, though the limit is huge."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "-"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "1 + 0.2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "tags": [
+     "raises-exception"
+    ]
+   },
+   "outputs": [],
+   "source": [
+    "1 + 0.1 + 0.1"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "2.0 ** 3000"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Converting between ```int``` and ```float```\n",
+    "- If you mix `int`s and `float`s in an expression, the result will always be a `float`.\n",
+    "     - Note that when you divide two `int`s, you get a `float` back.\n",
+    "- A value can be explicity **coerced** (i.e. converted) using the ```int``` and ```float``` functions."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "slideshow": {
+     "slide_type": "-"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "2.0 + 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "12 / 2"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Want an integer back.\n",
+    "int(12 / 2)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# int chops off the decimal point!\n",
+    "int(-2.9)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Aside: Jupyter memory model\n",
+    "\n",
+    "<center><img src='images/elephant.png' width=20%></center>\n",
+    "\n",
+    "Our notebook **still** remembers all of the variables we defined earlier in the lecture."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "triton"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "fragment"
+    }
+   },
+   "source": [
+    "- However, if you come back to your notebook after a few hours, it will usually \"forget\" all of the variables it once knew about.\n",
+    "- When this happens, you will need to run the cells in your notebook again.\n",
+    "- See [Navigating DataHub and Jupyter Notebooks](https://www.youtube.com/watch?v=Hq8VaNirDRQ) for more."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Summary, next time"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Summary\n",
+    "\n",
+    "- Expressions evaluate to values. Python will display the value of the last expression in a cell by default.\n",
+    "- Python knows about all of the standard mathematical operators and follows PEMDAS.\n",
+    "- Assignment statements allow us to bind values to variables.\n",
+    "- We can call functions in Python similar to how we call functions in math.\n",
+    "    - Python knows some functions by default, and import statements allow us to bring additional functionality from modules.\n",
+    "- All values in Python have a data type.\n",
+    "    - `int`s and `float`s are numbers.\n",
+    "    - `int`s are integers, while `float`s contain decimal points."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "### Next time\n",
+    "\n",
+    "- We'll learn about strings, a data type in Python designed to store text. \n",
+    "- We'll also learn how to store sequences, or many pieces of information, in a single variable.\n",
+    "\n",
+    "**Note**: We will introduce some code in labs and homeworks as well. Not everything will be in lecture. **You will learn by doing!**"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3 (ipykernel)",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.9.7"
+  },
+  "livereveal": {
+   "scroll": true,
+   "transition": "none"
+  },
+  "rise": {
+   "enable_chalkboard": true
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 2
+}

commit 2b1027fb90d0443c4c8686c756144fbdaa3cb215
Author: Yunfan Long <81694496+nobugguy@users.noreply.github.com>
Date:   Thu Nov 16 16:28:42 2023 -0800

    Initial commit

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..7105617
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+# DSC180A-Methodology-4
\ No newline at end of file
